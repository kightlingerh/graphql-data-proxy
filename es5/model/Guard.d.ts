import { Either, Left, Right } from 'fp-ts/lib/Either';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { None, Option, Some } from 'fp-ts/lib/Option';
import * as G from 'io-ts/Guard';
export * from 'io-ts/Guard';
export declare type Int = number;
export declare const int: G.Guard<unknown, Int>;
export declare type Float = number;
export declare const float: G.Guard<unknown, Float>;
export declare const none: G.Guard<unknown, None>;
export declare const some: <A>(value: G.Guard<unknown, A>) => G.Guard<unknown, Some<A>>;
export declare const option: <A>(value: G.Guard<unknown, A>) => G.Guard<unknown, Option<A>>;
export declare const left: <A>(left: G.Guard<unknown, A>) => G.Guard<unknown, Left<A>>;
export declare const right: <A>(right: G.Guard<unknown, A>) => G.Guard<unknown, Right<A>>;
export declare const either: <L, R>(l: G.Guard<unknown, L>, r: G.Guard<unknown, R>) => G.Guard<unknown, Either<L, R>>;
export declare const map: <K, A>(k: G.Guard<unknown, K>, a: G.Guard<unknown, A>) => G.Guard<unknown, Map<K, A>>;
export declare const set: <A>(item: G.Guard<unknown, A>) => G.Guard<unknown, Set<A>>;
export declare const nonEmptyArray: <A>(item: G.Guard<unknown, A>) => G.Guard<unknown, NonEmptyArray<A>>;
